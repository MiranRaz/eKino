// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKino.Services.Database;

#nullable disable

namespace eKino.Services.Migrations
{
    [DbContext(typeof(eKinoContext))]
    partial class eKinoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eKino.Services.Database.Auditorium", b =>
                {
                    b.Property<int>("AuditoriumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditoriumID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditoriumId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuditoriumId");

                    b.ToTable("Auditorium", (string)null);

                    b.HasData(
                        new
                        {
                            AuditoriumId = 1,
                            Name = "Auditorium 1"
                        },
                        new
                        {
                            AuditoriumId = 2,
                            Name = "Auditorium 2"
                        },
                        new
                        {
                            AuditoriumId = 3,
                            Name = "Auditorium 3"
                        },
                        new
                        {
                            AuditoriumId = 4,
                            Name = "Auditorium 4 - 3D"
                        },
                        new
                        {
                            AuditoriumId = 5,
                            Name = "Auditorium 5 - IMAX"
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"), 1L, 1);

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("DirectorId");

                    b.ToTable("Director", (string)null);

                    b.HasData(
                        new
                        {
                            DirectorId = 1,
                            Biography = "",
                            FullName = "Taika Waititi",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 2,
                            Biography = "",
                            FullName = "Joseph Kosinski",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 3,
                            Biography = "",
                            FullName = "David Leitch",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 4,
                            Biography = "",
                            FullName = "Julius Avery",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 5,
                            Biography = "",
                            FullName = "Peter Jackson",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 6,
                            Biography = "",
                            FullName = "Colin Trevorrow",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 7,
                            Biography = "",
                            FullName = "Baltasar Kormákur",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 8,
                            Biography = "",
                            FullName = "James Cameron",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 9,
                            Biography = "",
                            FullName = "Sergio Leone",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 10,
                            Biography = "",
                            FullName = "Matt Reeves",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 11,
                            Biography = "",
                            FullName = "Robert Zemeckis",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 12,
                            Biography = "",
                            FullName = "Mark Steven Johnson",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 13,
                            Biography = "",
                            FullName = "Ti West",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 14,
                            Biography = "",
                            FullName = "Andrew Dominik",
                            Photo = new byte[0]
                        },
                        new
                        {
                            DirectorId = 15,
                            Biography = "",
                            FullName = "Robert Eggers",
                            Photo = new byte[0]
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Horror"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Comedy"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Western"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Sci-fi"
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Romance"
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "Crime"
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "Adventure"
                        },
                        new
                        {
                            GenreId = 11,
                            Name = "Fantasy"
                        },
                        new
                        {
                            GenreId = 12,
                            Name = "Mystery"
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.IsDeleted", b =>
                {
                    b.Property<bool?>("IsDeleted1")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.ToTable("IsDeleted", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RunningTime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("MovieId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movie", (string)null);

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Description = "Thor desc",
                            DirectorId = 1,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Thor: Love and Thunder",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 2,
                            Description = "Top Gun: Maverick desc",
                            DirectorId = 2,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Top Gun: Maverick",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 3,
                            Description = "Bullet Train desc",
                            DirectorId = 3,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Bullet Train",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 4,
                            Description = "A young boy learns that a superhero who was thought to have gone missing after an epic battle twenty years ago may in fact still be around.",
                            DirectorId = 4,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Samaritan",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 5,
                            Description = "A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.",
                            DirectorId = 5,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "The Lord of the Rings: The Fellowship of the Ring",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 6,
                            Description = "Four years after the destruction of Isla Nublar, Biosyn operatives attempt to track down Maisie Lockwood, while Dr Ellie Sattler investigates a genetically engineered swarm of giant insects.",
                            DirectorId = 6,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Jurassic World Dominion",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 7,
                            Description = "A father and his two teenage daughters find themselves hunted by a massive rogue lion intent on proving that the Savanna has but one apex predator.",
                            DirectorId = 7,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Beast",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 8,
                            Description = "A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
                            DirectorId = 8,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Avatar",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 9,
                            Description = "A bounty hunting scam joins two men in an uneasy alliance against a third in a race to find a fortune in gold buried in a remote cemetery.",
                            DirectorId = 9,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "The Good, the Bad and the Ugly",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 10,
                            Description = "When a sadistic serial killer begins murdering key political figures in Gotham, Batman is forced to investigate the city's hidden corruption and question his family's involvement.",
                            DirectorId = 10,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "The Batman",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 11,
                            Description = "A puppet is brought to life by a fairy, who assigns him to lead a virtuous life in order to become a real boy.",
                            DirectorId = 11,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Pinocchio",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 12,
                            Description = "A young woman takes a trip to romantic Verona, Italy, after a breakup, only to find that the villa she reserved was double-booked, and she'll have to share her vacation with a cynical British man.",
                            DirectorId = 12,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Love in the Villa",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 13,
                            Description = "In 1979, a group of young filmmakers set out to make an adult film in rural Texas, but when their reclusive, elderly hosts catch them in the act, the cast find themselves fighting for their lives.",
                            DirectorId = 13,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "X",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 14,
                            Description = "A fictionalized chronicle of the inner life of Marilyn Monroe.",
                            DirectorId = 14,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "Blonde",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 15,
                            Description = "From visionary director Robert Eggers comes The Northman, an action-filled epic that follows a young Viking prince on his quest to avenge his father's murder.",
                            DirectorId = 15,
                            Photo = new byte[0],
                            RunningTime = "100",
                            Title = "The Northman",
                            Year = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.MovieGenre", b =>
                {
                    b.Property<int>("MovieGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieGenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieGenreId"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.HasKey("MovieGenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre", (string)null);

                    b.HasData(
                        new
                        {
                            MovieGenreId = 1,
                            GenreId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            MovieGenreId = 2,
                            GenreId = 10,
                            MovieId = 1
                        },
                        new
                        {
                            MovieGenreId = 3,
                            GenreId = 4,
                            MovieId = 1
                        },
                        new
                        {
                            MovieGenreId = 4,
                            GenreId = 1,
                            MovieId = 2
                        },
                        new
                        {
                            MovieGenreId = 5,
                            GenreId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            MovieGenreId = 6,
                            GenreId = 1,
                            MovieId = 3
                        },
                        new
                        {
                            MovieGenreId = 7,
                            GenreId = 4,
                            MovieId = 3
                        },
                        new
                        {
                            MovieGenreId = 8,
                            GenreId = 6,
                            MovieId = 3
                        },
                        new
                        {
                            MovieGenreId = 9,
                            GenreId = 1,
                            MovieId = 4
                        },
                        new
                        {
                            MovieGenreId = 10,
                            GenreId = 2,
                            MovieId = 4
                        },
                        new
                        {
                            MovieGenreId = 11,
                            GenreId = 11,
                            MovieId = 4
                        },
                        new
                        {
                            MovieGenreId = 12,
                            GenreId = 1,
                            MovieId = 5
                        },
                        new
                        {
                            MovieGenreId = 13,
                            GenreId = 10,
                            MovieId = 5
                        },
                        new
                        {
                            MovieGenreId = 14,
                            GenreId = 11,
                            MovieId = 5
                        },
                        new
                        {
                            MovieGenreId = 15,
                            GenreId = 1,
                            MovieId = 6
                        },
                        new
                        {
                            MovieGenreId = 16,
                            GenreId = 10,
                            MovieId = 6
                        },
                        new
                        {
                            MovieGenreId = 17,
                            GenreId = 7,
                            MovieId = 6
                        },
                        new
                        {
                            MovieGenreId = 18,
                            GenreId = 10,
                            MovieId = 7
                        },
                        new
                        {
                            MovieGenreId = 19,
                            GenreId = 2,
                            MovieId = 7
                        },
                        new
                        {
                            MovieGenreId = 20,
                            GenreId = 3,
                            MovieId = 7
                        },
                        new
                        {
                            MovieGenreId = 21,
                            GenreId = 1,
                            MovieId = 8
                        },
                        new
                        {
                            MovieGenreId = 22,
                            GenreId = 10,
                            MovieId = 8
                        },
                        new
                        {
                            MovieGenreId = 23,
                            GenreId = 11,
                            MovieId = 8
                        },
                        new
                        {
                            MovieGenreId = 24,
                            GenreId = 10,
                            MovieId = 9
                        },
                        new
                        {
                            MovieGenreId = 25,
                            GenreId = 5,
                            MovieId = 9
                        },
                        new
                        {
                            MovieGenreId = 26,
                            GenreId = 1,
                            MovieId = 10
                        },
                        new
                        {
                            MovieGenreId = 27,
                            GenreId = 9,
                            MovieId = 10
                        },
                        new
                        {
                            MovieGenreId = 28,
                            GenreId = 2,
                            MovieId = 10
                        },
                        new
                        {
                            MovieGenreId = 29,
                            GenreId = 1,
                            MovieId = 11
                        },
                        new
                        {
                            MovieGenreId = 30,
                            GenreId = 4,
                            MovieId = 11
                        },
                        new
                        {
                            MovieGenreId = 31,
                            GenreId = 2,
                            MovieId = 11
                        },
                        new
                        {
                            MovieGenreId = 32,
                            GenreId = 4,
                            MovieId = 12
                        },
                        new
                        {
                            MovieGenreId = 33,
                            GenreId = 8,
                            MovieId = 12
                        },
                        new
                        {
                            MovieGenreId = 34,
                            GenreId = 3,
                            MovieId = 13
                        },
                        new
                        {
                            MovieGenreId = 35,
                            GenreId = 12,
                            MovieId = 13
                        },
                        new
                        {
                            MovieGenreId = 36,
                            GenreId = 6,
                            MovieId = 13
                        },
                        new
                        {
                            MovieGenreId = 37,
                            GenreId = 4,
                            MovieId = 14
                        },
                        new
                        {
                            MovieGenreId = 38,
                            GenreId = 8,
                            MovieId = 14
                        },
                        new
                        {
                            MovieGenreId = 39,
                            GenreId = 12,
                            MovieId = 14
                        },
                        new
                        {
                            MovieGenreId = 40,
                            GenreId = 1,
                            MovieId = 15
                        },
                        new
                        {
                            MovieGenreId = 41,
                            GenreId = 10,
                            MovieId = 15
                        },
                        new
                        {
                            MovieGenreId = 42,
                            GenreId = 2,
                            MovieId = 15
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Projection", b =>
                {
                    b.Property<int>("ProjectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectionId"), 1L, 1);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("AuditoriumID");

                    b.Property<DateTime?>("DateOfProjection")
                        .HasColumnType("date");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ProjectionId");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("MovieId");

                    b.ToTable("Projection", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectionId = 1,
                            AuditoriumId = 2,
                            DateOfProjection = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 1,
                            TicketPrice = 5.00m
                        },
                        new
                        {
                            ProjectionId = 2,
                            AuditoriumId = 3,
                            DateOfProjection = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 2,
                            TicketPrice = 5.00m
                        },
                        new
                        {
                            ProjectionId = 3,
                            AuditoriumId = 4,
                            DateOfProjection = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 3,
                            TicketPrice = 5.00m
                        },
                        new
                        {
                            ProjectionId = 4,
                            AuditoriumId = 5,
                            DateOfProjection = new DateTime(2022, 9, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 4,
                            TicketPrice = 5.00m
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<DateTime?>("DateOfRating")
                        .HasColumnType("date");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<string>("Column")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateOfReservation")
                        .HasColumnType("date");

                    b.Property<string>("NumTicket")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectionId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectionID");

                    b.Property<string>("Row")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReservationId");

                    b.HasIndex("ProjectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", (string)null);

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            Column = "1",
                            DateOfReservation = new DateTime(2022, 9, 11, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            NumTicket = "2",
                            ProjectionId = 1,
                            Row = "1",
                            UserId = 3
                        },
                        new
                        {
                            ReservationId = 2,
                            Column = "1",
                            DateOfReservation = new DateTime(2022, 9, 12, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            NumTicket = "2",
                            ProjectionId = 2,
                            Row = "1",
                            UserId = 3
                        },
                        new
                        {
                            ReservationId = 3,
                            Column = "1",
                            DateOfReservation = new DateTime(2022, 9, 13, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            NumTicket = "1",
                            ProjectionId = 3,
                            Row = "1",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DateOfTransaction")
                        .HasColumnType("date");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TransactionId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("eKino.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@fit.ba",
                            FirstName = "Administrator",
                            LastName = "Administrator",
                            PasswordHash = "3U3v9TFBIOt0cK/n//Z6j1h51QQ=",
                            PasswordSalt = "i2iW2ERv5G1K0+Kdr6pQGg==",
                            Phone = "061456789",
                            Status = true,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "client@fit.ba",
                            FirstName = "Client",
                            LastName = "Client",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "client1@fit.ba",
                            FirstName = "Client 1",
                            LastName = "Client 1",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client1"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "client2@fit.ba",
                            FirstName = "Client 2",
                            LastName = "Client 2",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client2"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "client3@fit.ba",
                            FirstName = "Client 3",
                            LastName = "Client 3",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client3"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "client4@fit.ba",
                            FirstName = "Client 4",
                            LastName = "Client 4",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client4"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "client5@fit.ba",
                            FirstName = "Client 5",
                            LastName = "Client 5",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client5"
                        },
                        new
                        {
                            UserId = 8,
                            Email = "client6@fit.ba",
                            FirstName = "Client 6",
                            LastName = "Client 6",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client6"
                        },
                        new
                        {
                            UserId = 9,
                            Email = "client7@fit.ba",
                            FirstName = "Client 7",
                            LastName = "Client 7",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client7"
                        },
                        new
                        {
                            UserId = 10,
                            Email = "client8@fit.ba",
                            FirstName = "Client 8",
                            LastName = "Client 8",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client8"
                        },
                        new
                        {
                            UserId = 11,
                            Email = "client9@fit.ba",
                            FirstName = "Client 9",
                            LastName = "Client 9",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client9"
                        },
                        new
                        {
                            UserId = 12,
                            Email = "client10@fit.ba",
                            FirstName = "Client 10",
                            LastName = "Client 10",
                            PasswordHash = "Qt4/SE4hNB9rKyspn+e8q4C79Sw=",
                            PasswordSalt = "l6n9Ck0LvsyNX1/V47AePQ==",
                            Phone = "061123123",
                            Status = true,
                            Username = "client10"
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("date");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 5,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            UserRoleId = 6,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 6
                        },
                        new
                        {
                            UserRoleId = 7,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 7
                        },
                        new
                        {
                            UserRoleId = 8,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 8
                        },
                        new
                        {
                            UserRoleId = 9,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 9
                        },
                        new
                        {
                            UserRoleId = 10,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 10
                        },
                        new
                        {
                            UserRoleId = 11,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserRoleId = 12,
                            DateModified = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RoleId = 2,
                            UserId = 12
                        });
                });

            modelBuilder.Entity("eKino.Services.Database.Movie", b =>
                {
                    b.HasOne("eKino.Services.Database.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .IsRequired()
                        .HasConstraintName("FK_Movie_Director");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("eKino.Services.Database.MovieGenre", b =>
                {
                    b.HasOne("eKino.Services.Database.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Genre");

                    b.HasOne("eKino.Services.Database.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Movie");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eKino.Services.Database.Projection", b =>
                {
                    b.HasOne("eKino.Services.Database.Auditorium", "Auditorium")
                        .WithMany("Projections")
                        .HasForeignKey("AuditoriumId")
                        .IsRequired()
                        .HasConstraintName("FK_Projection_Auditorium");

                    b.HasOne("eKino.Services.Database.Movie", "Movie")
                        .WithMany("Projections")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Projection_Movie");

                    b.Navigation("Auditorium");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eKino.Services.Database.Rating", b =>
                {
                    b.HasOne("eKino.Services.Database.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Movie");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_User");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.Reservation", b =>
                {
                    b.HasOne("eKino.Services.Database.Projection", "Projection")
                        .WithMany("Reservations")
                        .HasForeignKey("ProjectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Projection");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_User");

                    b.Navigation("Projection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.Transaction", b =>
                {
                    b.HasOne("eKino.Services.Database.Reservation", "Reservation")
                        .WithMany("Transactions")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Reservation");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_User");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.UserRole", b =>
                {
                    b.HasOne("eKino.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("eKino.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eKino.Services.Database.Auditorium", b =>
                {
                    b.Navigation("Projections");
                });

            modelBuilder.Entity("eKino.Services.Database.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eKino.Services.Database.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("eKino.Services.Database.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("Projections");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("eKino.Services.Database.Projection", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("eKino.Services.Database.Reservation", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("eKino.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eKino.Services.Database.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("Transactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
